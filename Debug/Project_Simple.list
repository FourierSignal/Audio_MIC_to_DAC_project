
Project_Simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000482c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080049b4  080049b4  000149b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d4  080049d4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080049d4  080049d4  000149d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049dc  080049dc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080049e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a64  2000001c  08004a00  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a80  08004a00  00020a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014939  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a9c  00000000  00000000  00034985  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  00037428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  000383f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a0e  00000000  00000000  000392a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb44  00000000  00000000  0005acae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca2a1  00000000  00000000  000697f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133a93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004228  00000000  00000000  00133b10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800499c 	.word	0x0800499c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	0800499c 	.word	0x0800499c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <AudioIN_clock_config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t  RxBuffer[800];
void AudioIN_clock_config(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rccclkinit;
/*Enable PLLI2S clock*/
    HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4618      	mov	r0, r3
 80004da:	f003 fd1f 	bl	8003f1c <HAL_RCCEx_GetPeriphCLKConfig>
    /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    if ((AudioFreq & 0x7) == 0)
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	f003 0307 	and.w	r3, r3, #7
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d10b      	bne.n	8000500 <AudioIN_clock_config+0x38>
    {
      /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
      /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
      rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80004e8:	2301      	movs	r3, #1
 80004ea:	613b      	str	r3, [r7, #16]
      rccclkinit.PLLI2S.PLLI2SN = 192;
 80004ec:	23c0      	movs	r3, #192	; 0xc0
 80004ee:	617b      	str	r3, [r7, #20]
      rccclkinit.PLLI2S.PLLI2SR = 6;
 80004f0:	2306      	movs	r3, #6
 80004f2:	61bb      	str	r3, [r7, #24]
      HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4618      	mov	r0, r3
 80004fa:	f003 fc2d 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
      rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
      rccclkinit.PLLI2S.PLLI2SN = 290;
      rccclkinit.PLLI2S.PLLI2SR = 2;
      HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
    }
}
 80004fe:	e00b      	b.n	8000518 <AudioIN_clock_config+0x50>
      rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000500:	2301      	movs	r3, #1
 8000502:	613b      	str	r3, [r7, #16]
      rccclkinit.PLLI2S.PLLI2SN = 290;
 8000504:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000508:	617b      	str	r3, [r7, #20]
      rccclkinit.PLLI2S.PLLI2SR = 2;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
      HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4618      	mov	r0, r3
 8000514:	f003 fc20 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fd06 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f864 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f978 	bl	8000820 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000530:	f000 f8e2 	bl	80006f8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000534:	f000 f90e 	bl	8000754 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000538:	f000 f93c 	bl	80007b4 <MX_SPI1_Init>
  //MX_USB_HOST_Init();


  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED4);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fc69 	bl	8000e14 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000542:	2002      	movs	r0, #2
 8000544:	f000 fc66 	bl	8000e14 <BSP_LED_Init>

  // which I2S interface used for MEMS-Microphone ??
 /* MP45DT02(U9):  CLK <------- clkin(PB10): PB10 = I2S2_CK
  * 				DOUT------->pdmout(PC3): PC3 = I2S2_SD  ; pdm-Pulse differential modulation
 */
  hAudioInI2s.Instance = I2S2;
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <main+0xc4>)
 800054a:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <main+0xc8>)
 800054c:	601a      	str	r2, [r3, #0]
  //Initialising clock
  AudioIN_clock_config(&hAudioInI2s,I2S_AUDIOFREQ_16K,0);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000554:	4823      	ldr	r0, [pc, #140]	; (80005e4 <main+0xc4>)
 8000556:	f7ff ffb7 	bl	80004c8 <AudioIN_clock_config>
  //Initialize the I2S low level resources by implementing the HAL_I2S_MspInit(callback)
  //check the I2S state before I2S_MspInit: Is this required??
  HAL_I2S_MspInit(&hAudioInI2s);
 800055a:	4822      	ldr	r0, [pc, #136]	; (80005e4 <main+0xc4>)
 800055c:	f000 fad6 	bl	8000b0c <HAL_I2S_MspInit>
  // Program the Mode, Standard, Data Format, MCLK Output, Audio frequency and  Polarity using HAL_I2S_Init() function.
  //Initialise I2S_Handle and call HAL_I2S_Init.
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = I2S_AUDIOFREQ_8K;
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <main+0xc4>)
 8000562:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000566:	615a      	str	r2, [r3, #20]

  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <main+0xc4>)
 800056a:	2220      	movs	r2, #32
 800056c:	609a      	str	r2, [r3, #8]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <main+0xc4>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]

  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <main+0xc4>)
 8000576:	f44f 7240 	mov.w	r2, #768	; 0x300
 800057a:	605a      	str	r2, [r3, #4]

  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <main+0xc4>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <main+0xc4>)
 8000584:	2208      	movs	r2, #8
 8000586:	619a      	str	r2, [r3, #24]
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <main+0xc4>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]

  hAudioInI2s.IrqHandlerISR = HAL_I2S_IRQHandler;
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <main+0xc4>)
 8000590:	4a16      	ldr	r2, [pc, #88]	; (80005ec <main+0xcc>)
 8000592:	635a      	str	r2, [r3, #52]	; 0x34
  hAudioInI2s.pRxBuffPtr = RxBuffer;
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <main+0xc4>)
 8000596:	4a16      	ldr	r2, [pc, #88]	; (80005f0 <main+0xd0>)
 8000598:	62da      	str	r2, [r3, #44]	; 0x2c

  //First disable I2S : needed??
  __HAL_I2S_DISABLE(&hAudioInI2s);
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <main+0xc4>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	69da      	ldr	r2, [r3, #28]
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <main+0xc4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80005a8:	61da      	str	r2, [r3, #28]
  //HAL_I2S_Init(hAudioInI2s);
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <main+0xc4>)
 80005ac:	f002 fada 	bl	8002b64 <HAL_I2S_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <main+0x9c>
   {
     return -1;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ba:	e010      	b.n	80005de <main+0xbe>
   }
  __HAL_I2S_ENABLE_IT(&hAudioInI2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <main+0xc4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <main+0xc4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80005ca:	605a      	str	r2, [r3, #4]
  /* Check if the I2S is already enabled */
   //if ((&hAudioInI2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
   {
     /* Enable I2S peripheral */
     __HAL_I2S_ENABLE(&hAudioInI2s);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <main+0xc4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	69da      	ldr	r2, [r3, #28]
 80005d2:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <main+0xc4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005da:	61da      	str	r2, [r3, #28]
   }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0xbc>

    /* USER CODE BEGIN 3 */
//	  BSP_LED_Toggle(LED5);
  }
  /* USER CODE END 3 */
}
 80005de:	4618      	mov	r0, r3
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000770 	.word	0x20000770
 80005e8:	40003800 	.word	0x40003800
 80005ec:	08002de5 	.word	0x08002de5
 80005f0:	20000090 	.word	0x20000090

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b098      	sub	sp, #96	; 0x60
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 f9c2 	bl	800498c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <SystemClock_Config+0xfc>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <SystemClock_Config+0xfc>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	6413      	str	r3, [r2, #64]	; 0x40
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemClock_Config+0xfc>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <SystemClock_Config+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <SystemClock_Config+0x100>)
 800064c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065e:	2301      	movs	r3, #1
 8000660:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000672:	2308      	movs	r3, #8
 8000674:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000676:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000680:	2307      	movs	r3, #7
 8000682:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000688:	4618      	mov	r0, r3
 800068a:	f002 ff17 	bl	80034bc <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000694:	f000 f9c2 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	2105      	movs	r1, #5
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f970 	bl	800399c <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006c2:	f000 f9ab 	bl	8000a1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006ca:	23c0      	movs	r3, #192	; 0xc0
 80006cc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fb3e 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006e2:	f000 f99b 	bl	8000a1c <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3760      	adds	r7, #96	; 0x60
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f002 f8dd 	bl	80028f4 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 f96c 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000003c 	.word	0x2000003c
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_I2S3_Init+0x54>)
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <MX_I2S3_Init+0x58>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2S3_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_I2S3_Init+0x54>)
 800077c:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <MX_I2S3_Init+0x5c>)
 800077e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2S3_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_I2S3_Init+0x54>)
 8000794:	f002 f9e6 	bl	8002b64 <HAL_I2S_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800079e:	f000 f93d 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000728 	.word	0x20000728
 80007ac:	40003c00 	.word	0x40003c00
 80007b0:	00017700 	.word	0x00017700

080007b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_SPI1_Init+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_SPI1_Init+0x64>)
 8000800:	220a      	movs	r2, #10
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_SPI1_Init+0x64>)
 8000806:	f003 fc11 	bl	800402c <HAL_SPI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 f904 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200006d0 	.word	0x200006d0
 800081c:	40013000 	.word	0x40013000

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	4b71      	ldr	r3, [pc, #452]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a70      	ldr	r2, [pc, #448]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b6e      	ldr	r3, [pc, #440]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	4b6a      	ldr	r3, [pc, #424]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a69      	ldr	r2, [pc, #420]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b67      	ldr	r3, [pc, #412]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a62      	ldr	r2, [pc, #392]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b60      	ldr	r3, [pc, #384]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a5b      	ldr	r2, [pc, #364]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b59      	ldr	r3, [pc, #356]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a54      	ldr	r2, [pc, #336]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b52      	ldr	r3, [pc, #328]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a4d      	ldr	r2, [pc, #308]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b4b      	ldr	r3, [pc, #300]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2108      	movs	r1, #8
 80008e2:	4848      	ldr	r0, [pc, #288]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80008e4:	f000 fe44 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2101      	movs	r1, #1
 80008ec:	4846      	ldr	r0, [pc, #280]	; (8000a08 <MX_GPIO_Init+0x1e8>)
 80008ee:	f000 fe3f 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008f2:	2200      	movs	r2, #0
 80008f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008f8:	4844      	ldr	r0, [pc, #272]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 80008fa:	f000 fe39 	bl	8001570 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008fe:	2308      	movs	r3, #8
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	483b      	ldr	r0, [pc, #236]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000916:	f000 fc91 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800091a:	2301      	movs	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4835      	ldr	r0, [pc, #212]	; (8000a08 <MX_GPIO_Init+0x1e8>)
 8000932:	f000 fc83 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000936:	2308      	movs	r3, #8
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000946:	2305      	movs	r3, #5
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	482d      	ldr	r0, [pc, #180]	; (8000a08 <MX_GPIO_Init+0x1e8>)
 8000952:	f000 fc73 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <MX_GPIO_Init+0x1f0>)
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	482a      	ldr	r0, [pc, #168]	; (8000a14 <MX_GPIO_Init+0x1f4>)
 800096a:	f000 fc67 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800096e:	2304      	movs	r3, #4
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4825      	ldr	r0, [pc, #148]	; (8000a18 <MX_GPIO_Init+0x1f8>)
 8000982:	f000 fc5b 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000998:	2305      	movs	r3, #5
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <MX_GPIO_Init+0x1f8>)
 80009a4:	f000 fc4a 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80009a8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ac:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4812      	ldr	r0, [pc, #72]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 80009c2:	f000 fc3b 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009c6:	2320      	movs	r3, #32
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 80009da:	f000 fc2f 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009de:	2302      	movs	r3, #2
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_GPIO_Init+0x1f0>)
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80009f2:	f000 fc23 	bl	800123c <HAL_GPIO_Init>

}
 80009f6:	bf00      	nop
 80009f8:	3730      	adds	r7, #48	; 0x30
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	10120000 	.word	0x10120000
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_I2C_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12c      	bne.n	8000af8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac0:	2312      	movs	r3, #18
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000acc:	2304      	movs	r3, #4
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <HAL_I2C_MspInit+0x8c>)
 8000ad8:	f000 fbb0 	bl	800123c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40005400 	.word	0x40005400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020400 	.word	0x40020400

08000b0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a45      	ldr	r2, [pc, #276]	; (8000c40 <HAL_I2S_MspInit+0x134>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d14a      	bne.n	8000bc4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	4b44      	ldr	r3, [pc, #272]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a43      	ldr	r2, [pc, #268]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a3c      	ldr	r2, [pc, #240]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b3a      	ldr	r3, [pc, #232]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a35      	ldr	r2, [pc, #212]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b82:	2310      	movs	r3, #16
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b92:	2306      	movs	r3, #6
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	482a      	ldr	r0, [pc, #168]	; (8000c48 <HAL_I2S_MspInit+0x13c>)
 8000b9e:	f000 fb4d 	bl	800123c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb4:	2306      	movs	r3, #6
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4823      	ldr	r0, [pc, #140]	; (8000c4c <HAL_I2S_MspInit+0x140>)
 8000bc0:	f000 fb3c 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

  if(hi2s->Instance==SPI2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <HAL_I2S_MspInit+0x144>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d134      	bne.n	8000c38 <HAL_I2S_MspInit+0x12c>
  {
		//GPIO_InitTypeDef  GPIO_InitStruct;

		//a.Enable the SPIx interface clock.
		__HAL_RCC_SPI2_CLK_ENABLE(); //clock for SPI2/I2S2 interface
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
		//b.I2S pins configuration:
		    //Enable the clock for the I2S GPIOs.
			__HAL_RCC_GPIOB_CLK_ENABLE();  //I2S2_CK/PB10 : is Bit clock
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_I2S_MspInit+0x138>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
			//__HAL_RCC_GPIOC_CLK_ENABLE();
			//Configure these I2S pins as alternate function pull-up.
			  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	623b      	str	r3, [r7, #32]
			  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
			  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
			  // configure PB10 as I2S2_SCK pin
			  GPIO_InitStruct.Pin       = GPIO_PIN_10;
 8000c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c16:	61fb      	str	r3, [r7, #28]
			  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			  HAL_GPIO_Init(GPIOB , &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <HAL_I2S_MspInit+0x148>)
 8000c24:	f000 fb0a 	bl	800123c <HAL_GPIO_Init>

		//c.NVIC configuration if you need to use interrupt process (HAL_I2S_Transmit_IT() and HAL_I2S_Receive_IT() APIs).
		     //Configure the I2Sx interrupt priority.
		     //Enable the NVIC I2S IRQ handle
			  HAL_NVIC_SetPriority(SPI2_IRQn, 0x0F, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	2024      	movs	r0, #36	; 0x24
 8000c2e:	f000 face 	bl	80011ce <HAL_NVIC_SetPriority>
			  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c32:	2024      	movs	r0, #36	; 0x24
 8000c34:	f000 fae7 	bl	8001206 <HAL_NVIC_EnableIRQ>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3730      	adds	r7, #48	; 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40003c00 	.word	0x40003c00
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40003800 	.word	0x40003800
 8000c54:	40020400 	.word	0x40020400

08000c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_SPI_MspInit+0x84>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12b      	bne.n	8000cd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cb2:	23e0      	movs	r3, #224	; 0xe0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_SPI_MspInit+0x8c>)
 8000cce:	f000 fab5 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40013000 	.word	0x40013000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 f94c 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <OTG_FS_IRQHandler+0x10>)
 8000d4a:	f000 fc45 	bl	80015d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200007bc 	.word	0x200007bc

08000d58 <SPI2_IRQHandler>:

/* USER CODE BEGIN 1 */

void SPI2_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

	//your code here.
	static int count;
	count++;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <SPI2_IRQHandler+0x30>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <SPI2_IRQHandler+0x30>)
 8000d64:	6013      	str	r3, [r2, #0]
	if(count== 10*8000)
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <SPI2_IRQHandler+0x30>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <SPI2_IRQHandler+0x34>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d105      	bne.n	8000d7c <SPI2_IRQHandler+0x24>
	{
		BSP_LED_Toggle(LED5);
 8000d70:	2002      	movs	r0, #2
 8000d72:	f000 f8c7 	bl	8000f04 <BSP_LED_Toggle>
		count = 0;
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SPI2_IRQHandler+0x30>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
	}
	//(or)
	HAL_I2S_IRQHandler(&hAudioInI2s);
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <SPI2_IRQHandler+0x38>)
 8000d7e:	f002 f831 	bl	8002de4 <HAL_I2S_IRQHandler>
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000038 	.word	0x20000038
 8000d8c:	00013880 	.word	0x00013880
 8000d90:	20000770 	.word	0x20000770

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <SystemInit+0x28>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <SystemInit+0x28>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SystemInit+0x28>)
 8000daa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dae:	609a      	str	r2, [r3, #8]
#endif
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dc6:	e003      	b.n	8000dd0 <LoopCopyDataInit>

08000dc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dce:	3104      	adds	r1, #4

08000dd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dd8:	d3f6      	bcc.n	8000dc8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ddc:	e002      	b.n	8000de4 <LoopFillZerobss>

08000dde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000de0:	f842 3b04 	str.w	r3, [r2], #4

08000de4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000de6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000de8:	d3f9      	bcc.n	8000dde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dea:	f7ff ffd3 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f003 fda9 	bl	8004944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fb95 	bl	8000520 <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dfc:	080049e4 	.word	0x080049e4
  ldr  r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e04:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000e08:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000e0c:	20000a80 	.word	0x20000a80

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10e      	bne.n	8000e42 <BSP_LED_Init+0x2e>
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a32      	ldr	r2, [pc, #200]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	e034      	b.n	8000eac <BSP_LED_Init+0x98>
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d10e      	bne.n	8000e66 <BSP_LED_Init+0x52>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a29      	ldr	r2, [pc, #164]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	e022      	b.n	8000eac <BSP_LED_Init+0x98>
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d10e      	bne.n	8000e8a <BSP_LED_Init+0x76>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a20      	ldr	r2, [pc, #128]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000e76:	f043 0308 	orr.w	r3, r3, #8
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	e010      	b.n	8000eac <BSP_LED_Init+0x98>
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d10d      	bne.n	8000eac <BSP_LED_Init+0x98>
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <BSP_LED_Init+0xe4>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4a13      	ldr	r2, [pc, #76]	; (8000efc <BSP_LED_Init+0xe8>)
 8000eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <BSP_LED_Init+0xec>)
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	f107 021c 	add.w	r2, r7, #28
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f9b3 	bl	800123c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <BSP_LED_Init+0xec>)
 8000eda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <BSP_LED_Init+0xe8>)
 8000ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f000 fb41 	bl	8001570 <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	3730      	adds	r7, #48	; 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	080049cc 	.word	0x080049cc
 8000f00:	20000004 	.word	0x20000004

08000f04 <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <BSP_LED_Toggle+0x28>)
 8000f12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <BSP_LED_Toggle+0x2c>)
 8000f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f000 fb3f 	bl	80015a2 <HAL_GPIO_TogglePin>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000004 	.word	0x20000004
 8000f30:	080049cc 	.word	0x080049cc

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <HAL_Init+0x40>)
 8000f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_Init+0x40>)
 8000f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_Init+0x40>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 f92b 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f808 	bl	8000f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f68:	f7ff fd60 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023c00 	.word	0x40023c00

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x54>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x58>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f943 	bl	8001222 <HAL_SYSTICK_Config>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00e      	b.n	8000fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d80a      	bhi.n	8000fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb4:	f000 f90b 	bl	80011ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb8:	4a06      	ldr	r2, [pc, #24]	; (8000fd4 <HAL_InitTick+0x5c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e000      	b.n	8000fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000018 	.word	0x20000018
 8000fd4:	20000014 	.word	0x20000014

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000018 	.word	0x20000018
 8000ffc:	200007b8 	.word	0x200007b8

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	200007b8 	.word	0x200007b8

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001198:	f7ff ff8e 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff29 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff3e 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff8e 	bl	800110c <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5d 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff31 	bl	800107c <__NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffa2 	bl	8001174 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e16b      	b.n	8001530 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 815a 	bne.w	800152a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d00b      	beq.n	8001296 <HAL_GPIO_Init+0x5a>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800128a:	2b11      	cmp	r3, #17
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b12      	cmp	r3, #18
 8001294:	d130      	bne.n	80012f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012cc:	2201      	movs	r2, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 0201 	and.w	r2, r3, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0xfc>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b12      	cmp	r3, #18
 8001336:	d123      	bne.n	8001380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	69b9      	ldr	r1, [r7, #24]
 800137c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80b4 	beq.w	800152a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_GPIO_Init+0x308>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a5e      	ldr	r2, [pc, #376]	; (8001544 <HAL_GPIO_Init+0x308>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <HAL_GPIO_Init+0x308>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013de:	4a5a      	ldr	r2, [pc, #360]	; (8001548 <HAL_GPIO_Init+0x30c>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a51      	ldr	r2, [pc, #324]	; (800154c <HAL_GPIO_Init+0x310>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d02b      	beq.n	8001462 <HAL_GPIO_Init+0x226>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a50      	ldr	r2, [pc, #320]	; (8001550 <HAL_GPIO_Init+0x314>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d025      	beq.n	800145e <HAL_GPIO_Init+0x222>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <HAL_GPIO_Init+0x318>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d01f      	beq.n	800145a <HAL_GPIO_Init+0x21e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4e      	ldr	r2, [pc, #312]	; (8001558 <HAL_GPIO_Init+0x31c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d019      	beq.n	8001456 <HAL_GPIO_Init+0x21a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4d      	ldr	r2, [pc, #308]	; (800155c <HAL_GPIO_Init+0x320>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0x216>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4c      	ldr	r2, [pc, #304]	; (8001560 <HAL_GPIO_Init+0x324>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x212>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4b      	ldr	r2, [pc, #300]	; (8001564 <HAL_GPIO_Init+0x328>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x20e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <HAL_GPIO_Init+0x32c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_Init+0x20a>
 8001442:	2307      	movs	r3, #7
 8001444:	e00e      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001446:	2308      	movs	r3, #8
 8001448:	e00c      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800144a:	2306      	movs	r3, #6
 800144c:	e00a      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800144e:	2305      	movs	r3, #5
 8001450:	e008      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001452:	2304      	movs	r3, #4
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001456:	2303      	movs	r3, #3
 8001458:	e004      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800145a:	2302      	movs	r3, #2
 800145c:	e002      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001462:	2300      	movs	r3, #0
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	f002 0203 	and.w	r2, r2, #3
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	4093      	lsls	r3, r2
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001474:	4934      	ldr	r1, [pc, #208]	; (8001548 <HAL_GPIO_Init+0x30c>)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001482:	4b3a      	ldr	r3, [pc, #232]	; (800156c <HAL_GPIO_Init+0x330>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a6:	4a31      	ldr	r2, [pc, #196]	; (800156c <HAL_GPIO_Init+0x330>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <HAL_GPIO_Init+0x330>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d0:	4a26      	ldr	r2, [pc, #152]	; (800156c <HAL_GPIO_Init+0x330>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <HAL_GPIO_Init+0x330>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <HAL_GPIO_Init+0x330>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_GPIO_Init+0x330>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_GPIO_Init+0x330>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	f67f ae90 	bls.w	8001258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001538:	bf00      	nop
 800153a:	3724      	adds	r7, #36	; 0x24
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40023800 	.word	0x40023800
 8001548:	40013800 	.word	0x40013800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800
 8001558:	40020c00 	.word	0x40020c00
 800155c:	40021000 	.word	0x40021000
 8001560:	40021400 	.word	0x40021400
 8001564:	40021800 	.word	0x40021800
 8001568:	40021c00 	.word	0x40021c00
 800156c:	40013c00 	.word	0x40013c00

08001570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
 800157c:	4613      	mov	r3, r2
 800157e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001580:	787b      	ldrb	r3, [r7, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800158c:	e003      	b.n	8001596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	041a      	lsls	r2, r3, #16
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	619a      	str	r2, [r3, #24]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	401a      	ands	r2, r3
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d104      	bne.n	80015c6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	041a      	lsls	r2, r3, #16
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 fe26 	bl	8004240 <USB_GetMode>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	f040 80f1 	bne.w	80017de <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f002 fe0a 	bl	800421a <USB_ReadInterrupts>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80e7 	beq.w	80017dc <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f002 fe01 	bl	800421a <USB_ReadInterrupts>
 8001618:	4603      	mov	r3, r0
 800161a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001622:	d104      	bne.n	800162e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800162c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f002 fdf1 	bl	800421a <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001642:	d104      	bne.n	800164e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800164c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fde1 	bl	800421a <USB_ReadInterrupts>
 8001658:	4603      	mov	r3, r0
 800165a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800165e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001662:	d104      	bne.n	800166e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800166c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fdd1 	bl	800421a <USB_ReadInterrupts>
 8001678:	4603      	mov	r3, r0
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b02      	cmp	r3, #2
 8001680:	d103      	bne.n	800168a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2202      	movs	r2, #2
 8001688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f002 fdc3 	bl	800421a <USB_ReadInterrupts>
 8001694:	4603      	mov	r3, r0
 8001696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800169a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800169e:	d117      	bne.n	80016d0 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80016ae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80016b2:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f003 f8ab 	bl	8004810 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2101      	movs	r1, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 fdcb 	bl	800425c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fda0 	bl	800421a <USB_ReadInterrupts>
 80016da:	4603      	mov	r3, r0
 80016dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e4:	d102      	bne.n	80016ec <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f001 f874 	bl	80027d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 fd92 	bl	800421a <USB_ReadInterrupts>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d106      	bne.n	800170e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f003 f869 	bl	80047d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2208      	movs	r2, #8
 800170c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fd81 	bl	800421a <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001722:	d138      	bne.n	8001796 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f002 fe0a 	bl	8004342 <USB_HC_ReadInterrupt>
 800172e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e025      	b.n	8001782 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d018      	beq.n	800177c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	015a      	lsls	r2, r3, #5
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800175c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001760:	d106      	bne.n	8001770 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f87b 	bl	8001864 <HCD_HC_IN_IRQHandler>
 800176e:	e005      	b.n	800177c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fc0b 	bl	8001f92 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	d3d4      	bcc.n	8001736 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fd3d 	bl	800421a <USB_ReadInterrupts>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d101      	bne.n	80017ae <HAL_HCD_IRQHandler+0x1d6>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_HCD_IRQHandler+0x1d8>
 80017ae:	2300      	movs	r3, #0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d014      	beq.n	80017de <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0210 	bic.w	r2, r2, #16
 80017c2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 ff59 	bl	800267c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	699a      	ldr	r2, [r3, #24]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0210 	orr.w	r2, r2, #16
 80017d8:	619a      	str	r2, [r3, #24]
 80017da:	e000      	b.n	80017de <HAL_HCD_IRQHandler+0x206>
      return;
 80017dc:	bf00      	nop
    }
  }
}
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_HCD_Start+0x16>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e013      	b.n	8001822 <HAL_HCD_Start+0x3e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fc74 	bl	80040f4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fd5c 	bl	80042d0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_HCD_Stop+0x16>
 800183c:	2302      	movs	r3, #2
 800183e:	e00d      	b.n	800185c <HAL_HCD_Stop+0x32>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fe88 	bl	8004562 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4413      	add	r3, r2
 8001886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b04      	cmp	r3, #4
 8001892:	d119      	bne.n	80018c8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4413      	add	r3, r2
 800189c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a0:	461a      	mov	r2, r3
 80018a2:	2304      	movs	r3, #4
 80018a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	0151      	lsls	r1, r2, #5
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	440a      	add	r2, r1
 80018bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	60d3      	str	r3, [r2, #12]
 80018c6:	e095      	b.n	80019f4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b20      	cmp	r3, #32
 80018dc:	d109      	bne.n	80018f2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ea:	461a      	mov	r2, r3
 80018ec:	2320      	movs	r3, #32
 80018ee:	6093      	str	r3, [r2, #8]
 80018f0:	e080      	b.n	80019f4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	015a      	lsls	r2, r3, #5
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b08      	cmp	r3, #8
 8001906:	d134      	bne.n	8001972 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4413      	add	r3, r2
 8001910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	0151      	lsls	r1, r2, #5
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	440a      	add	r2, r1
 800191e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	335d      	adds	r3, #93	; 0x5d
 8001938:	2205      	movs	r2, #5
 800193a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	015a      	lsls	r2, r3, #5
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4413      	add	r3, r2
 8001944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001948:	461a      	mov	r2, r3
 800194a:	2310      	movs	r3, #16
 800194c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4413      	add	r3, r2
 8001956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195a:	461a      	mov	r2, r3
 800195c:	2308      	movs	r3, #8
 800195e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f002 fcfa 	bl	8004364 <USB_HC_Halt>
 8001970:	e040      	b.n	80019f4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4413      	add	r3, r2
 800197a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001988:	d134      	bne.n	80019f4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4413      	add	r3, r2
 8001992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	0151      	lsls	r1, r2, #5
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	440a      	add	r2, r1
 80019a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fcd5 	bl	8004364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c6:	461a      	mov	r2, r3
 80019c8:	2310      	movs	r3, #16
 80019ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	440b      	add	r3, r1
 80019da:	335d      	adds	r3, #93	; 0x5d
 80019dc:	2208      	movs	r2, #8
 80019de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	015a      	lsls	r2, r3, #5
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ec:	461a      	mov	r2, r3
 80019ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	015a      	lsls	r2, r3, #5
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4413      	add	r3, r2
 80019fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a0a:	d122      	bne.n	8001a52 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	0151      	lsls	r1, r2, #5
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	440a      	add	r2, r1
 8001a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 fc94 	bl	8004364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	015a      	lsls	r2, r3, #5
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a50:	e29b      	b.n	8001f8a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	f040 80c1 	bne.w	8001bec <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d01b      	beq.n	8001aaa <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	3348      	adds	r3, #72	; 0x48
 8001a82:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	0159      	lsls	r1, r3, #5
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a96:	1ad1      	subs	r1, r2, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4403      	add	r3, r0
 8001aa6:	334c      	adds	r3, #76	; 0x4c
 8001aa8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	335d      	adds	r3, #93	; 0x5d
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	3358      	adds	r3, #88	; 0x58
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	015a      	lsls	r2, r3, #5
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	333f      	adds	r3, #63	; 0x3f
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00a      	beq.n	8001b10 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	333f      	adds	r3, #63	; 0x3f
 8001b0a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d121      	bne.n	8001b54 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	015a      	lsls	r2, r3, #5
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	0151      	lsls	r1, r2, #5
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	440a      	add	r2, r1
 8001b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fc12 	bl	8004364 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	015a      	lsls	r2, r3, #5
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2310      	movs	r3, #16
 8001b50:	6093      	str	r3, [r2, #8]
 8001b52:	e034      	b.n	8001bbe <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	333f      	adds	r3, #63	; 0x3f
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d129      	bne.n	8001bbe <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	0151      	lsls	r1, r2, #5
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	440a      	add	r2, r1
 8001b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b88:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	335c      	adds	r3, #92	; 0x5c
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	b2d8      	uxtb	r0, r3
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	335c      	adds	r3, #92	; 0x5c
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f002 fe37 	bl	800482c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3350      	adds	r3, #80	; 0x50
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	f083 0301 	eor.w	r3, r3, #1
 8001bd4:	b2d8      	uxtb	r0, r3
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	3350      	adds	r3, #80	; 0x50
 8001be6:	4602      	mov	r2, r0
 8001be8:	701a      	strb	r2, [r3, #0]
}
 8001bea:	e1ce      	b.n	8001f8a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	f040 80f1 	bne.w	8001de6 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	0151      	lsls	r1, r2, #5
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	440a      	add	r2, r1
 8001c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c1e:	f023 0302 	bic.w	r3, r3, #2
 8001c22:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	335d      	adds	r3, #93	; 0x5d
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10a      	bne.n	8001c50 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	335c      	adds	r3, #92	; 0x5c
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e0b0      	b.n	8001db2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	335d      	adds	r3, #93	; 0x5d
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d10a      	bne.n	8001c7c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	335c      	adds	r3, #92	; 0x5c
 8001c76:	2205      	movs	r2, #5
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e09a      	b.n	8001db2 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	335d      	adds	r3, #93	; 0x5d
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d00a      	beq.n	8001ca8 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	335d      	adds	r3, #93	; 0x5d
 8001ca2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d156      	bne.n	8001d56 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3358      	adds	r3, #88	; 0x58
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	1c59      	adds	r1, r3, #1
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4403      	add	r3, r0
 8001cca:	3358      	adds	r3, #88	; 0x58
 8001ccc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	3358      	adds	r3, #88	; 0x58
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d914      	bls.n	8001d0e <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3358      	adds	r3, #88	; 0x58
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	335c      	adds	r3, #92	; 0x5c
 8001d08:	2204      	movs	r2, #4
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	e009      	b.n	8001d22 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	335c      	adds	r3, #92	; 0x5c
 8001d1e:	2202      	movs	r2, #2
 8001d20:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d38:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d40:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e02d      	b.n	8001db2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	335d      	adds	r3, #93	; 0x5d
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d122      	bne.n	8001db2 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	440b      	add	r3, r1
 8001d7a:	335c      	adds	r3, #92	; 0x5c
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d96:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d9e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	b2d8      	uxtb	r0, r3
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	335c      	adds	r3, #92	; 0x5c
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4601      	mov	r1, r0
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f002 fd24 	bl	800482c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001de4:	e0d1      	b.n	8001f8a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df8:	2b80      	cmp	r3, #128	; 0x80
 8001dfa:	d13e      	bne.n	8001e7a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	0151      	lsls	r1, r2, #5
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	440a      	add	r2, r1
 8001e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	3358      	adds	r3, #88	; 0x58
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	1c59      	adds	r1, r3, #1
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4403      	add	r3, r0
 8001e3e:	3358      	adds	r3, #88	; 0x58
 8001e40:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	335d      	adds	r3, #93	; 0x5d
 8001e52:	2206      	movs	r2, #6
 8001e54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fa7f 	bl	8004364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e72:	461a      	mov	r2, r3
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	6093      	str	r3, [r2, #8]
}
 8001e78:	e087      	b.n	8001f8a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d17c      	bne.n	8001f8a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	333f      	adds	r3, #63	; 0x3f
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d122      	bne.n	8001eec <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3358      	adds	r3, #88	; 0x58
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	0151      	lsls	r1, r2, #5
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	440a      	add	r2, r1
 8001ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fa3d 	bl	8004364 <USB_HC_Halt>
 8001eea:	e045      	b.n	8001f78 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	333f      	adds	r3, #63	; 0x3f
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	333f      	adds	r3, #63	; 0x3f
 8001f12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d12f      	bne.n	8001f78 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	440b      	add	r3, r1
 8001f26:	3358      	adds	r3, #88	; 0x58
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d121      	bne.n	8001f78 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	335d      	adds	r3, #93	; 0x5d
 8001f44:	2203      	movs	r2, #3
 8001f46:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	0151      	lsls	r1, r2, #5
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	440a      	add	r2, r1
 8001f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f002 f9f6 	bl	8004364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	461a      	mov	r2, r3
 8001f86:	2310      	movs	r3, #16
 8001f88:	6093      	str	r3, [r2, #8]
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d119      	bne.n	8001ff6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	0151      	lsls	r1, r2, #5
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	440a      	add	r2, r1
 8001fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001ff4:	e33e      	b.n	8002674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b20      	cmp	r3, #32
 800200a:	d141      	bne.n	8002090 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4413      	add	r3, r2
 8002014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002018:	461a      	mov	r2, r3
 800201a:	2320      	movs	r3, #32
 800201c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	333d      	adds	r3, #61	; 0x3d
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	f040 831f 	bne.w	8002674 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	333d      	adds	r3, #61	; 0x3d
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	335c      	adds	r3, #92	; 0x5c
 800205a:	2202      	movs	r2, #2
 800205c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	0151      	lsls	r1, r2, #5
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	440a      	add	r2, r1
 8002074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f002 f96b 	bl	8004364 <USB_HC_Halt>
}
 800208e:	e2f1      	b.n	8002674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d13f      	bne.n	8002126 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	335d      	adds	r3, #93	; 0x5d
 80020b6:	2204      	movs	r2, #4
 80020b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	333d      	adds	r3, #61	; 0x3d
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	3358      	adds	r3, #88	; 0x58
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	0151      	lsls	r1, r2, #5
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	440a      	add	r2, r1
 80020f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f002 f929 	bl	8004364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	461a      	mov	r2, r3
 8002120:	2340      	movs	r3, #64	; 0x40
 8002122:	6093      	str	r3, [r2, #8]
}
 8002124:	e2a6      	b.n	8002674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213c:	d122      	bne.n	8002184 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	0151      	lsls	r1, r2, #5
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	440a      	add	r2, r1
 8002154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f002 f8fb 	bl	8004364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217a:	461a      	mov	r2, r3
 800217c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002180:	6093      	str	r3, [r2, #8]
}
 8002182:	e277      	b.n	8002674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d135      	bne.n	8002206 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	3358      	adds	r3, #88	; 0x58
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	0151      	lsls	r1, r2, #5
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	440a      	add	r2, r1
 80021c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 f8c3 	bl	8004364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	461a      	mov	r2, r3
 80021ec:	2301      	movs	r3, #1
 80021ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	335d      	adds	r3, #93	; 0x5d
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
}
 8002204:	e236      	b.n	8002674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b08      	cmp	r3, #8
 800221a:	d12b      	bne.n	8002274 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	461a      	mov	r2, r3
 800222a:	2308      	movs	r3, #8
 800222c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	0151      	lsls	r1, r2, #5
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	440a      	add	r2, r1
 8002244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f002 f883 	bl	8004364 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	335d      	adds	r3, #93	; 0x5d
 800226e:	2205      	movs	r2, #5
 8002270:	701a      	strb	r2, [r3, #0]
}
 8002272:	e1ff      	b.n	8002674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b10      	cmp	r3, #16
 8002288:	d155      	bne.n	8002336 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3358      	adds	r3, #88	; 0x58
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	335d      	adds	r3, #93	; 0x5d
 80022ae:	2203      	movs	r2, #3
 80022b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	333d      	adds	r3, #61	; 0x3d
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d114      	bne.n	80022f2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	333c      	adds	r3, #60	; 0x3c
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	440b      	add	r3, r1
 80022ec:	333d      	adds	r3, #61	; 0x3d
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	0151      	lsls	r1, r2, #5
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	440a      	add	r2, r1
 8002308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f002 f821 	bl	8004364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	461a      	mov	r2, r3
 8002330:	2310      	movs	r3, #16
 8002332:	6093      	str	r3, [r2, #8]
}
 8002334:	e19e      	b.n	8002674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002348:	2b80      	cmp	r3, #128	; 0x80
 800234a:	d12b      	bne.n	80023a4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	0151      	lsls	r1, r2, #5
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	440a      	add	r2, r1
 8002362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f001 fff4 	bl	8004364 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	335d      	adds	r3, #93	; 0x5d
 800238c:	2206      	movs	r2, #6
 800238e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	461a      	mov	r2, r3
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	6093      	str	r3, [r2, #8]
}
 80023a2:	e167      	b.n	8002674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ba:	d135      	bne.n	8002428 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	0151      	lsls	r1, r2, #5
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	440a      	add	r2, r1
 80023d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 ffbc 	bl	8004364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	461a      	mov	r2, r3
 80023fa:	2310      	movs	r3, #16
 80023fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	461a      	mov	r2, r3
 800240c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002410:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	440b      	add	r3, r1
 8002420:	335d      	adds	r3, #93	; 0x5d
 8002422:	2208      	movs	r2, #8
 8002424:	701a      	strb	r2, [r3, #0]
}
 8002426:	e125      	b.n	8002674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4413      	add	r3, r2
 8002430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	f040 811a 	bne.w	8002674 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	0151      	lsls	r1, r2, #5
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	440a      	add	r2, r1
 8002456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800245a:	f023 0302 	bic.w	r3, r3, #2
 800245e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	440b      	add	r3, r1
 800246e:	335d      	adds	r3, #93	; 0x5d
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d137      	bne.n	80024e6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	335c      	adds	r3, #92	; 0x5c
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	333f      	adds	r3, #63	; 0x3f
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d00b      	beq.n	80024b8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	333f      	adds	r3, #63	; 0x3f
 80024b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	f040 80c5 	bne.w	8002642 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	3351      	adds	r3, #81	; 0x51
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2d8      	uxtb	r0, r3
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	3351      	adds	r3, #81	; 0x51
 80024e0:	4602      	mov	r2, r0
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	e0ad      	b.n	8002642 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	440b      	add	r3, r1
 80024f4:	335d      	adds	r3, #93	; 0x5d
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d10a      	bne.n	8002512 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	335c      	adds	r3, #92	; 0x5c
 800250c:	2202      	movs	r2, #2
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	e097      	b.n	8002642 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	335d      	adds	r3, #93	; 0x5d
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d10a      	bne.n	800253e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	335c      	adds	r3, #92	; 0x5c
 8002538:	2202      	movs	r2, #2
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e081      	b.n	8002642 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	440b      	add	r3, r1
 800254c:	335d      	adds	r3, #93	; 0x5d
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b05      	cmp	r3, #5
 8002552:	d10a      	bne.n	800256a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	335c      	adds	r3, #92	; 0x5c
 8002564:	2205      	movs	r2, #5
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	e06b      	b.n	8002642 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	440b      	add	r3, r1
 8002578:	335d      	adds	r3, #93	; 0x5d
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b06      	cmp	r3, #6
 800257e:	d00a      	beq.n	8002596 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	440b      	add	r3, r1
 800258e:	335d      	adds	r3, #93	; 0x5d
 8002590:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002592:	2b08      	cmp	r3, #8
 8002594:	d155      	bne.n	8002642 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	3358      	adds	r3, #88	; 0x58
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	1c59      	adds	r1, r3, #1
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4403      	add	r3, r0
 80025b8:	3358      	adds	r3, #88	; 0x58
 80025ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	3358      	adds	r3, #88	; 0x58
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d914      	bls.n	80025fc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	3358      	adds	r3, #88	; 0x58
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	335c      	adds	r3, #92	; 0x5c
 80025f6:	2204      	movs	r2, #4
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e009      	b.n	8002610 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	335c      	adds	r3, #92	; 0x5c
 800260c:	2202      	movs	r2, #2
 800260e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002626:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800262e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	461a      	mov	r2, r3
 8002650:	2302      	movs	r3, #2
 8002652:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	b2d8      	uxtb	r0, r3
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	335c      	adds	r3, #92	; 0x5c
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	4601      	mov	r1, r0
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f002 f8dc 	bl	800482c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002674:	bf00      	nop
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	0c5b      	lsrs	r3, r3, #17
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d003      	beq.n	80026c0 <HCD_RXQLVL_IRQHandler+0x44>
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	f000 8082 	beq.w	80027c2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80026be:	e083      	b.n	80027c8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d07f      	beq.n	80027c6 <HCD_RXQLVL_IRQHandler+0x14a>
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	440b      	add	r3, r1
 80026d4:	3344      	adds	r3, #68	; 0x44
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d074      	beq.n	80027c6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	3344      	adds	r3, #68	; 0x44
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	b292      	uxth	r2, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f001 fd66 	bl	80041c8 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	3344      	adds	r3, #68	; 0x44
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	18d1      	adds	r1, r2, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4403      	add	r3, r0
 8002720:	3344      	adds	r3, #68	; 0x44
 8002722:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	334c      	adds	r3, #76	; 0x4c
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	18d1      	adds	r1, r2, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4403      	add	r3, r0
 8002748:	334c      	adds	r3, #76	; 0x4c
 800274a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HCD_RXQLVL_IRQHandler+0x154>)
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d031      	beq.n	80027c6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002778:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002780:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	3350      	adds	r3, #80	; 0x50
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	f083 0301 	eor.w	r3, r3, #1
 80027aa:	b2d8      	uxtb	r0, r3
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	3350      	adds	r3, #80	; 0x50
 80027bc:	4602      	mov	r2, r0
 80027be:	701a      	strb	r2, [r3, #0]
      break;
 80027c0:	e001      	b.n	80027c6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80027c6:	bf00      	nop
  }
}
 80027c8:	bf00      	nop
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	1ff80000 	.word	0x1ff80000

080027d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002800:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b02      	cmp	r3, #2
 800280a:	d113      	bne.n	8002834 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10a      	bne.n	800282c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002824:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f001 ffe4 	bl	80047f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b08      	cmp	r3, #8
 800283c:	d147      	bne.n	80028ce <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f043 0308 	orr.w	r3, r3, #8
 8002844:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d129      	bne.n	80028a4 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d113      	bne.n	8002880 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800285e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002862:	d106      	bne.n	8002872 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2102      	movs	r1, #2
 800286a:	4618      	mov	r0, r3
 800286c:	f001 fcf6 	bl	800425c <USB_InitFSLSPClkSel>
 8002870:	e011      	b.n	8002896 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2101      	movs	r1, #1
 8002878:	4618      	mov	r0, r3
 800287a:	f001 fcef 	bl	800425c <USB_InitFSLSPClkSel>
 800287e:	e00a      	b.n	8002896 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800288e:	461a      	mov	r2, r3
 8002890:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002894:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f001 ffd6 	bl	8004848 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f001 ffa9 	bl	80047f4 <HAL_HCD_Connect_Callback>
 80028a2:	e014      	b.n	80028ce <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f001 ffdd 	bl	8004864 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80028b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80028bc:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d103      	bne.n	80028e0 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f043 0320 	orr.w	r3, r3, #32
 80028de:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e11f      	b.n	8002b46 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe f8ae 	bl	8000a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	; 0x24
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002946:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002956:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002958:	f001 f9ea 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 800295c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4a7b      	ldr	r2, [pc, #492]	; (8002b50 <HAL_I2C_Init+0x25c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d807      	bhi.n	8002978 <HAL_I2C_Init+0x84>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a7a      	ldr	r2, [pc, #488]	; (8002b54 <HAL_I2C_Init+0x260>)
 800296c:	4293      	cmp	r3, r2
 800296e:	bf94      	ite	ls
 8002970:	2301      	movls	r3, #1
 8002972:	2300      	movhi	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e006      	b.n	8002986 <HAL_I2C_Init+0x92>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a77      	ldr	r2, [pc, #476]	; (8002b58 <HAL_I2C_Init+0x264>)
 800297c:	4293      	cmp	r3, r2
 800297e:	bf94      	ite	ls
 8002980:	2301      	movls	r3, #1
 8002982:	2300      	movhi	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0db      	b.n	8002b46 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a72      	ldr	r2, [pc, #456]	; (8002b5c <HAL_I2C_Init+0x268>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0c9b      	lsrs	r3, r3, #18
 8002998:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a64      	ldr	r2, [pc, #400]	; (8002b50 <HAL_I2C_Init+0x25c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d802      	bhi.n	80029c8 <HAL_I2C_Init+0xd4>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3301      	adds	r3, #1
 80029c6:	e009      	b.n	80029dc <HAL_I2C_Init+0xe8>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	4a63      	ldr	r2, [pc, #396]	; (8002b60 <HAL_I2C_Init+0x26c>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	3301      	adds	r3, #1
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4956      	ldr	r1, [pc, #344]	; (8002b50 <HAL_I2C_Init+0x25c>)
 80029f8:	428b      	cmp	r3, r1
 80029fa:	d80d      	bhi.n	8002a18 <HAL_I2C_Init+0x124>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e59      	subs	r1, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	bf38      	it	cc
 8002a14:	2304      	movcc	r3, #4
 8002a16:	e04f      	b.n	8002ab8 <HAL_I2C_Init+0x1c4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d111      	bne.n	8002a44 <HAL_I2C_Init+0x150>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1e58      	subs	r0, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	440b      	add	r3, r1
 8002a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e012      	b.n	8002a6a <HAL_I2C_Init+0x176>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e58      	subs	r0, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	0099      	lsls	r1, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Init+0x17e>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e022      	b.n	8002ab8 <HAL_I2C_Init+0x1c4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10e      	bne.n	8002a98 <HAL_I2C_Init+0x1a4>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1e58      	subs	r0, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	440b      	add	r3, r1
 8002a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a96:	e00f      	b.n	8002ab8 <HAL_I2C_Init+0x1c4>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e58      	subs	r0, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	0099      	lsls	r1, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	6809      	ldr	r1, [r1, #0]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69da      	ldr	r2, [r3, #28]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ae6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6911      	ldr	r1, [r2, #16]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68d2      	ldr	r2, [r2, #12]
 8002af2:	4311      	orrs	r1, r2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	000186a0 	.word	0x000186a0
 8002b54:	001e847f 	.word	0x001e847f
 8002b58:	003d08ff 	.word	0x003d08ff
 8002b5c:	431bde83 	.word	0x431bde83
 8002b60:	10624dd3 	.word	0x10624dd3

08002b64 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e128      	b.n	8002dc8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a90      	ldr	r2, [pc, #576]	; (8002dd0 <HAL_I2S_Init+0x26c>)
 8002b8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7fd ffbb 	bl	8000b0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002bac:	f023 030f 	bic.w	r3, r3, #15
 8002bb0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d060      	beq.n	8002c84 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002bca:	2310      	movs	r3, #16
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e001      	b.n	8002bd4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d802      	bhi.n	8002be2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002be2:	2001      	movs	r0, #1
 8002be4:	f001 f9c6 	bl	8003f74 <HAL_RCCEx_GetPeriphCLKFreq>
 8002be8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf2:	d125      	bne.n	8002c40 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d010      	beq.n	8002c1e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	461a      	mov	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	3305      	adds	r3, #5
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	e01f      	b.n	8002c5e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	461a      	mov	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	3305      	adds	r3, #5
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	e00e      	b.n	8002c5e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	461a      	mov	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	3305      	adds	r3, #5
 8002c5c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4a5c      	ldr	r2, [pc, #368]	; (8002dd4 <HAL_I2S_Init+0x270>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	08db      	lsrs	r3, r3, #3
 8002c68:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	e003      	b.n	8002c8c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002c84:	2302      	movs	r3, #2
 8002c86:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d902      	bls.n	8002c98 <HAL_I2S_Init+0x134>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	2bff      	cmp	r3, #255	; 0xff
 8002c96:	d907      	bls.n	8002ca8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	f043 0210 	orr.w	r2, r3, #16
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e08f      	b.n	8002dc8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	ea42 0103 	orr.w	r1, r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002cc6:	f023 030f 	bic.w	r3, r3, #15
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6851      	ldr	r1, [r2, #4]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6892      	ldr	r2, [r2, #8]
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68d2      	ldr	r2, [r2, #12]
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6992      	ldr	r2, [r2, #24]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d161      	bne.n	8002db8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a38      	ldr	r2, [pc, #224]	; (8002dd8 <HAL_I2S_Init+0x274>)
 8002cf8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a37      	ldr	r2, [pc, #220]	; (8002ddc <HAL_I2S_Init+0x278>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_I2S_Init+0x1a4>
 8002d04:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_I2S_Init+0x27c>)
 8002d06:	e001      	b.n	8002d0c <HAL_I2S_Init+0x1a8>
 8002d08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	4932      	ldr	r1, [pc, #200]	; (8002ddc <HAL_I2S_Init+0x278>)
 8002d14:	428a      	cmp	r2, r1
 8002d16:	d101      	bne.n	8002d1c <HAL_I2S_Init+0x1b8>
 8002d18:	4a31      	ldr	r2, [pc, #196]	; (8002de0 <HAL_I2S_Init+0x27c>)
 8002d1a:	e001      	b.n	8002d20 <HAL_I2S_Init+0x1bc>
 8002d1c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002d20:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d24:	f023 030f 	bic.w	r3, r3, #15
 8002d28:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2b      	ldr	r2, [pc, #172]	; (8002ddc <HAL_I2S_Init+0x278>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d101      	bne.n	8002d38 <HAL_I2S_Init+0x1d4>
 8002d34:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_I2S_Init+0x27c>)
 8002d36:	e001      	b.n	8002d3c <HAL_I2S_Init+0x1d8>
 8002d38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <HAL_I2S_Init+0x278>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_I2S_Init+0x1ea>
 8002d4a:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <HAL_I2S_Init+0x27c>)
 8002d4c:	e001      	b.n	8002d52 <HAL_I2S_Init+0x1ee>
 8002d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d5e:	d003      	beq.n	8002d68 <HAL_I2S_Init+0x204>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	e001      	b.n	8002d74 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	b299      	uxth	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002d8a:	4303      	orrs	r3, r0
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002d92:	4313      	orrs	r3, r2
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	897b      	ldrh	r3, [r7, #10]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002da0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <HAL_I2S_Init+0x278>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d101      	bne.n	8002db0 <HAL_I2S_Init+0x24c>
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_I2S_Init+0x27c>)
 8002dae:	e001      	b.n	8002db4 <HAL_I2S_Init+0x250>
 8002db0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002db4:	897a      	ldrh	r2, [r7, #10]
 8002db6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	08002ef3 	.word	0x08002ef3
 8002dd4:	cccccccd 	.word	0xcccccccd
 8002dd8:	08003009 	.word	0x08003009
 8002ddc:	40003800 	.word	0x40003800
 8002de0:	40003400 	.word	0x40003400

08002de4 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4798      	blx	r3
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	1c9a      	adds	r2, r3, #2
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10e      	bne.n	8002e8c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ffb8 	bl	8002dfc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	1c9a      	adds	r2, r3, #2
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10e      	bne.n	8002eea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002eda:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff93 	bl	8002e10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d13a      	bne.n	8002f84 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d109      	bne.n	8002f2c <I2S_IRQHandler+0x3a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d102      	bne.n	8002f2c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff ffb4 	bl	8002e94 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b40      	cmp	r3, #64	; 0x40
 8002f34:	d126      	bne.n	8002f84 <I2S_IRQHandler+0x92>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d11f      	bne.n	8002f84 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f043 0202 	orr.w	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff ff50 	bl	8002e24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d136      	bne.n	8002ffe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d109      	bne.n	8002fae <I2S_IRQHandler+0xbc>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	d102      	bne.n	8002fae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ff45 	bl	8002e38 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d122      	bne.n	8002ffe <I2S_IRQHandler+0x10c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d11b      	bne.n	8002ffe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fd4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	f043 0204 	orr.w	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff13 	bl	8002e24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4aa2      	ldr	r2, [pc, #648]	; (80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003022:	4ba2      	ldr	r3, [pc, #648]	; (80032ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003024:	e001      	b.n	800302a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a9b      	ldr	r2, [pc, #620]	; (80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003040:	4b9a      	ldr	r3, [pc, #616]	; (80032ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003042:	e001      	b.n	8003048 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003054:	d004      	beq.n	8003060 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f040 8099 	bne.w	8003192 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b02      	cmp	r3, #2
 8003068:	d107      	bne.n	800307a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f925 	bl	80032c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f9c8 	bl	8003424 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d13a      	bne.n	8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d035      	beq.n	8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a7e      	ldr	r2, [pc, #504]	; (80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80030b2:	4b7e      	ldr	r3, [pc, #504]	; (80032ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030b4:	e001      	b.n	80030ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80030b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4979      	ldr	r1, [pc, #484]	; (80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030c2:	428b      	cmp	r3, r1
 80030c4:	d101      	bne.n	80030ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80030c6:	4b79      	ldr	r3, [pc, #484]	; (80032ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030c8:	e001      	b.n	80030ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80030ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f043 0202 	orr.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fe88 	bl	8002e24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b08      	cmp	r3, #8
 800311c:	f040 80be 	bne.w	800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80b8 	beq.w	800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800313a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a59      	ldr	r2, [pc, #356]	; (80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003146:	4b59      	ldr	r3, [pc, #356]	; (80032ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003148:	e001      	b.n	800314e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800314a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4954      	ldr	r1, [pc, #336]	; (80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003156:	428b      	cmp	r3, r1
 8003158:	d101      	bne.n	800315e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800315a:	4b54      	ldr	r3, [pc, #336]	; (80032ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800315c:	e001      	b.n	8003162 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800315e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003162:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003166:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f043 0204 	orr.w	r2, r3, #4
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff fe4a 	bl	8002e24 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003190:	e084      	b.n	800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b02      	cmp	r3, #2
 800319a:	d107      	bne.n	80031ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8be 	bl	8003328 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d107      	bne.n	80031c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f8fd 	bl	80033c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	d12f      	bne.n	8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d02a      	beq.n	8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a2e      	ldr	r2, [pc, #184]	; (80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d101      	bne.n	80031f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80031f4:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031f6:	e001      	b.n	80031fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80031f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4929      	ldr	r1, [pc, #164]	; (80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003204:	428b      	cmp	r3, r1
 8003206:	d101      	bne.n	800320c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800320a:	e001      	b.n	8003210 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800320c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003214:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f043 0202 	orr.w	r2, r3, #2
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fdfa 	bl	8002e24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b08      	cmp	r3, #8
 8003238:	d131      	bne.n	800329e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02c      	beq.n	800329e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003250:	e001      	b.n	8003256 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003252:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4912      	ldr	r1, [pc, #72]	; (80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800325e:	428b      	cmp	r3, r1
 8003260:	d101      	bne.n	8003266 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003264:	e001      	b.n	800326a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003266:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800326a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800326e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800327e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f043 0204 	orr.w	r2, r3, #4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff fdc5 	bl	8002e24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800329a:	e000      	b.n	800329e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800329c:	bf00      	nop
}
 800329e:	bf00      	nop
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40003800 	.word	0x40003800
 80032ac:	40003400 	.word	0x40003400

080032b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c99      	adds	r1, r3, #2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6251      	str	r1, [r2, #36]	; 0x24
 80032d6:	881a      	ldrh	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d113      	bne.n	800331e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003304:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ffc9 	bl	80032b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c99      	adds	r1, r3, #2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6251      	str	r1, [r2, #36]	; 0x24
 800333a:	8819      	ldrh	r1, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <I2SEx_TxISR_I2SExt+0x22>
 8003346:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <I2SEx_TxISR_I2SExt+0x94>)
 8003348:	e001      	b.n	800334e <I2SEx_TxISR_I2SExt+0x26>
 800334a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800334e:	460a      	mov	r2, r1
 8003350:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d121      	bne.n	80033ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <I2SEx_TxISR_I2SExt+0x50>
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <I2SEx_TxISR_I2SExt+0x94>)
 8003376:	e001      	b.n	800337c <I2SEx_TxISR_I2SExt+0x54>
 8003378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	490d      	ldr	r1, [pc, #52]	; (80033b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003384:	428b      	cmp	r3, r1
 8003386:	d101      	bne.n	800338c <I2SEx_TxISR_I2SExt+0x64>
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <I2SEx_TxISR_I2SExt+0x94>)
 800338a:	e001      	b.n	8003390 <I2SEx_TxISR_I2SExt+0x68>
 800338c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003390:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003394:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d106      	bne.n	80033ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff81 	bl	80032b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40003800 	.word	0x40003800
 80033bc:	40003400 	.word	0x40003400

080033c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68d8      	ldr	r0, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	1c99      	adds	r1, r3, #2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80033d8:	b282      	uxth	r2, r0
 80033da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d113      	bne.n	800341c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003402:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ff4a 	bl	80032b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a20      	ldr	r2, [pc, #128]	; (80034b4 <I2SEx_RxISR_I2SExt+0x90>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <I2SEx_RxISR_I2SExt+0x16>
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <I2SEx_RxISR_I2SExt+0x94>)
 8003438:	e001      	b.n	800343e <I2SEx_RxISR_I2SExt+0x1a>
 800343a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343e:	68d8      	ldr	r0, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	1c99      	adds	r1, r3, #2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	62d1      	str	r1, [r2, #44]	; 0x2c
 800344a:	b282      	uxth	r2, r0
 800344c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d121      	bne.n	80034aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <I2SEx_RxISR_I2SExt+0x90>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <I2SEx_RxISR_I2SExt+0x50>
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <I2SEx_RxISR_I2SExt+0x94>)
 8003472:	e001      	b.n	8003478 <I2SEx_RxISR_I2SExt+0x54>
 8003474:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	490d      	ldr	r1, [pc, #52]	; (80034b4 <I2SEx_RxISR_I2SExt+0x90>)
 8003480:	428b      	cmp	r3, r1
 8003482:	d101      	bne.n	8003488 <I2SEx_RxISR_I2SExt+0x64>
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <I2SEx_RxISR_I2SExt+0x94>)
 8003486:	e001      	b.n	800348c <I2SEx_RxISR_I2SExt+0x68>
 8003488:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003490:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff03 	bl	80032b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40003800 	.word	0x40003800
 80034b8:	40003400 	.word	0x40003400

080034bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e25b      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d075      	beq.n	80035c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034da:	4ba3      	ldr	r3, [pc, #652]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d00c      	beq.n	8003500 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e6:	4ba0      	ldr	r3, [pc, #640]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d112      	bne.n	8003518 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f2:	4b9d      	ldr	r3, [pc, #628]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034fe:	d10b      	bne.n	8003518 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	4b99      	ldr	r3, [pc, #612]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d05b      	beq.n	80035c4 <HAL_RCC_OscConfig+0x108>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d157      	bne.n	80035c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e236      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d106      	bne.n	8003530 <HAL_RCC_OscConfig+0x74>
 8003522:	4b91      	ldr	r3, [pc, #580]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a90      	ldr	r2, [pc, #576]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e01d      	b.n	800356c <HAL_RCC_OscConfig+0xb0>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x98>
 800353a:	4b8b      	ldr	r3, [pc, #556]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a8a      	ldr	r2, [pc, #552]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a87      	ldr	r2, [pc, #540]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e00b      	b.n	800356c <HAL_RCC_OscConfig+0xb0>
 8003554:	4b84      	ldr	r3, [pc, #528]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a83      	ldr	r2, [pc, #524]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b81      	ldr	r3, [pc, #516]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a80      	ldr	r2, [pc, #512]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d013      	beq.n	800359c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fd fd44 	bl	8001000 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357c:	f7fd fd40 	bl	8001000 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e1fb      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0xc0>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fd fd30 	bl	8001000 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fd fd2c 	bl	8001000 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e1e7      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	4b6c      	ldr	r3, [pc, #432]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0xe8>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d063      	beq.n	800369a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035d2:	4b65      	ldr	r3, [pc, #404]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035de:	4b62      	ldr	r3, [pc, #392]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d11c      	bne.n	8003624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ea:	4b5f      	ldr	r3, [pc, #380]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d116      	bne.n	8003624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f6:	4b5c      	ldr	r3, [pc, #368]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_RCC_OscConfig+0x152>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d001      	beq.n	800360e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e1bb      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360e:	4b56      	ldr	r3, [pc, #344]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4952      	ldr	r1, [pc, #328]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003622:	e03a      	b.n	800369a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d020      	beq.n	800366e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800362c:	4b4f      	ldr	r3, [pc, #316]	; (800376c <HAL_RCC_OscConfig+0x2b0>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fd fce5 	bl	8001000 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800363a:	f7fd fce1 	bl	8001000 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e19c      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364c:	4b46      	ldr	r3, [pc, #280]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003658:	4b43      	ldr	r3, [pc, #268]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4940      	ldr	r1, [pc, #256]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	4313      	orrs	r3, r2
 800366a:	600b      	str	r3, [r1, #0]
 800366c:	e015      	b.n	800369a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366e:	4b3f      	ldr	r3, [pc, #252]	; (800376c <HAL_RCC_OscConfig+0x2b0>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7fd fcc4 	bl	8001000 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367c:	f7fd fcc0 	bl	8001000 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e17b      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d030      	beq.n	8003708 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d016      	beq.n	80036dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ae:	4b30      	ldr	r3, [pc, #192]	; (8003770 <HAL_RCC_OscConfig+0x2b4>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fd fca4 	bl	8001000 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036bc:	f7fd fca0 	bl	8001000 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e15b      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x200>
 80036da:	e015      	b.n	8003708 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036dc:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_OscConfig+0x2b4>)
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e2:	f7fd fc8d 	bl	8001000 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ea:	f7fd fc89 	bl	8001000 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e144      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fc:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80036fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a0 	beq.w	8003856 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003716:	2300      	movs	r3, #0
 8003718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
 8003736:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_OscConfig+0x2b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d121      	bne.n	8003796 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_RCC_OscConfig+0x2b8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a07      	ldr	r2, [pc, #28]	; (8003774 <HAL_RCC_OscConfig+0x2b8>)
 8003758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800375e:	f7fd fc4f 	bl	8001000 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003764:	e011      	b.n	800378a <HAL_RCC_OscConfig+0x2ce>
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
 800376c:	42470000 	.word	0x42470000
 8003770:	42470e80 	.word	0x42470e80
 8003774:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003778:	f7fd fc42 	bl	8001000 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e0fd      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b81      	ldr	r3, [pc, #516]	; (8003990 <HAL_RCC_OscConfig+0x4d4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d106      	bne.n	80037ac <HAL_RCC_OscConfig+0x2f0>
 800379e:	4b7d      	ldr	r3, [pc, #500]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	4a7c      	ldr	r2, [pc, #496]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6713      	str	r3, [r2, #112]	; 0x70
 80037aa:	e01c      	b.n	80037e6 <HAL_RCC_OscConfig+0x32a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b05      	cmp	r3, #5
 80037b2:	d10c      	bne.n	80037ce <HAL_RCC_OscConfig+0x312>
 80037b4:	4b77      	ldr	r3, [pc, #476]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a76      	ldr	r2, [pc, #472]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	4b74      	ldr	r3, [pc, #464]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4a73      	ldr	r2, [pc, #460]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6713      	str	r3, [r2, #112]	; 0x70
 80037cc:	e00b      	b.n	80037e6 <HAL_RCC_OscConfig+0x32a>
 80037ce:	4b71      	ldr	r3, [pc, #452]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a70      	ldr	r2, [pc, #448]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
 80037da:	4b6e      	ldr	r3, [pc, #440]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	4a6d      	ldr	r2, [pc, #436]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d015      	beq.n	800381a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ee:	f7fd fc07 	bl	8001000 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fd fc03 	bl	8001000 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	; 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e0bc      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380c:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ee      	beq.n	80037f6 <HAL_RCC_OscConfig+0x33a>
 8003818:	e014      	b.n	8003844 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fd fbf1 	bl	8001000 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fd fbed 	bl	8001000 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0a6      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003838:	4b56      	ldr	r3, [pc, #344]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ee      	bne.n	8003822 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d105      	bne.n	8003856 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384a:	4b52      	ldr	r3, [pc, #328]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	4a51      	ldr	r2, [pc, #324]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 8003850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8092 	beq.w	8003984 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003860:	4b4c      	ldr	r3, [pc, #304]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d05c      	beq.n	8003926 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d141      	bne.n	80038f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b48      	ldr	r3, [pc, #288]	; (8003998 <HAL_RCC_OscConfig+0x4dc>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387a:	f7fd fbc1 	bl	8001000 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003882:	f7fd fbbd 	bl	8001000 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e078      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003894:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f0      	bne.n	8003882 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	019b      	lsls	r3, r3, #6
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	3b01      	subs	r3, #1
 80038ba:	041b      	lsls	r3, r3, #16
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	061b      	lsls	r3, r3, #24
 80038c4:	4933      	ldr	r1, [pc, #204]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ca:	4b33      	ldr	r3, [pc, #204]	; (8003998 <HAL_RCC_OscConfig+0x4dc>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fd fb96 	bl	8001000 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fd fb92 	bl	8001000 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e04d      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ea:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x41c>
 80038f6:	e045      	b.n	8003984 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f8:	4b27      	ldr	r3, [pc, #156]	; (8003998 <HAL_RCC_OscConfig+0x4dc>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fd fb7f 	bl	8001000 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003906:	f7fd fb7b 	bl	8001000 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e036      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003918:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x44a>
 8003924:	e02e      	b.n	8003984 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e029      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	429a      	cmp	r2, r3
 8003944:	d11c      	bne.n	8003980 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d115      	bne.n	8003980 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800395a:	4013      	ands	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003960:	4293      	cmp	r3, r2
 8003962:	d10d      	bne.n	8003980 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d106      	bne.n	8003980 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40007000 	.word	0x40007000
 8003994:	40023800 	.word	0x40023800
 8003998:	42470060 	.word	0x42470060

0800399c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0cc      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b0:	4b68      	ldr	r3, [pc, #416]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d90c      	bls.n	80039d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b65      	ldr	r3, [pc, #404]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b63      	ldr	r3, [pc, #396]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0b8      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f0:	4b59      	ldr	r3, [pc, #356]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a58      	ldr	r2, [pc, #352]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a08:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a52      	ldr	r2, [pc, #328]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a14:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	494d      	ldr	r1, [pc, #308]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d044      	beq.n	8003abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b47      	ldr	r3, [pc, #284]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d119      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e07f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5a:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e06f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e067      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7a:	4b37      	ldr	r3, [pc, #220]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f023 0203 	bic.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4934      	ldr	r1, [pc, #208]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a8c:	f7fd fab8 	bl	8001000 <HAL_GetTick>
 8003a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a94:	f7fd fab4 	bl	8001000 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e04f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 020c 	and.w	r2, r3, #12
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d1eb      	bne.n	8003a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003abc:	4b25      	ldr	r3, [pc, #148]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d20c      	bcs.n	8003ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b22      	ldr	r3, [pc, #136]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e032      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af0:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4916      	ldr	r1, [pc, #88]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b0e:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	490e      	ldr	r1, [pc, #56]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b22:	f000 f821 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8003b26:	4601      	mov	r1, r0
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <HAL_RCC_ClockConfig+0x1c0>)
 8003b34:	5cd3      	ldrb	r3, [r2, r3]
 8003b36:	fa21 f303 	lsr.w	r3, r1, r3
 8003b3a:	4a09      	ldr	r2, [pc, #36]	; (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fd fa18 	bl	8000f78 <HAL_InitTick>

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023c00 	.word	0x40023c00
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	080049b4 	.word	0x080049b4
 8003b60:	20000000 	.word	0x20000000
 8003b64:	20000014 	.word	0x20000014

08003b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	2300      	movs	r3, #0
 8003b78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b7e:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d007      	beq.n	8003b9a <HAL_RCC_GetSysClockFreq+0x32>
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d008      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x38>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 80b4 	bne.w	8003cfc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4b5e      	ldr	r3, [pc, #376]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b96:	60bb      	str	r3, [r7, #8]
       break;
 8003b98:	e0b3      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b9a:	4b5e      	ldr	r3, [pc, #376]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003b9c:	60bb      	str	r3, [r7, #8]
      break;
 8003b9e:	e0b0      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba0:	4b5a      	ldr	r3, [pc, #360]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003baa:	4b58      	ldr	r3, [pc, #352]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d04a      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb6:	4b55      	ldr	r3, [pc, #340]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	099b      	lsrs	r3, r3, #6
 8003bbc:	f04f 0400 	mov.w	r4, #0
 8003bc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	ea03 0501 	and.w	r5, r3, r1
 8003bcc:	ea04 0602 	and.w	r6, r4, r2
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	4632      	mov	r2, r6
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	f04f 0400 	mov.w	r4, #0
 8003bdc:	0154      	lsls	r4, r2, #5
 8003bde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003be2:	014b      	lsls	r3, r1, #5
 8003be4:	4619      	mov	r1, r3
 8003be6:	4622      	mov	r2, r4
 8003be8:	1b49      	subs	r1, r1, r5
 8003bea:	eb62 0206 	sbc.w	r2, r2, r6
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	f04f 0400 	mov.w	r4, #0
 8003bf6:	0194      	lsls	r4, r2, #6
 8003bf8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bfc:	018b      	lsls	r3, r1, #6
 8003bfe:	1a5b      	subs	r3, r3, r1
 8003c00:	eb64 0402 	sbc.w	r4, r4, r2
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	00e2      	lsls	r2, r4, #3
 8003c0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c12:	00d9      	lsls	r1, r3, #3
 8003c14:	460b      	mov	r3, r1
 8003c16:	4614      	mov	r4, r2
 8003c18:	195b      	adds	r3, r3, r5
 8003c1a:	eb44 0406 	adc.w	r4, r4, r6
 8003c1e:	f04f 0100 	mov.w	r1, #0
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	0262      	lsls	r2, r4, #9
 8003c28:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c2c:	0259      	lsls	r1, r3, #9
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4614      	mov	r4, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	4621      	mov	r1, r4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f04f 0400 	mov.w	r4, #0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4623      	mov	r3, r4
 8003c40:	f7fc fac2 	bl	80001c8 <__aeabi_uldivmod>
 8003c44:	4603      	mov	r3, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e049      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4c:	4b2f      	ldr	r3, [pc, #188]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	f04f 0400 	mov.w	r4, #0
 8003c56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	ea03 0501 	and.w	r5, r3, r1
 8003c62:	ea04 0602 	and.w	r6, r4, r2
 8003c66:	4629      	mov	r1, r5
 8003c68:	4632      	mov	r2, r6
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	f04f 0400 	mov.w	r4, #0
 8003c72:	0154      	lsls	r4, r2, #5
 8003c74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c78:	014b      	lsls	r3, r1, #5
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	1b49      	subs	r1, r1, r5
 8003c80:	eb62 0206 	sbc.w	r2, r2, r6
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	0194      	lsls	r4, r2, #6
 8003c8e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c92:	018b      	lsls	r3, r1, #6
 8003c94:	1a5b      	subs	r3, r3, r1
 8003c96:	eb64 0402 	sbc.w	r4, r4, r2
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	00e2      	lsls	r2, r4, #3
 8003ca4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ca8:	00d9      	lsls	r1, r3, #3
 8003caa:	460b      	mov	r3, r1
 8003cac:	4614      	mov	r4, r2
 8003cae:	195b      	adds	r3, r3, r5
 8003cb0:	eb44 0406 	adc.w	r4, r4, r6
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	02a2      	lsls	r2, r4, #10
 8003cbe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003cc2:	0299      	lsls	r1, r3, #10
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4614      	mov	r4, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	4621      	mov	r1, r4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f04f 0400 	mov.w	r4, #0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4623      	mov	r3, r4
 8003cd6:	f7fc fa77 	bl	80001c8 <__aeabi_uldivmod>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	3301      	adds	r3, #1
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	60bb      	str	r3, [r7, #8]
      break;
 8003cfa:	e002      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cfe:	60bb      	str	r3, [r7, #8]
      break;
 8003d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d02:	68bb      	ldr	r3, [r7, #8]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	00f42400 	.word	0x00f42400
 8003d14:	007a1200 	.word	0x007a1200

08003d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000000 	.word	0x20000000

08003d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d34:	f7ff fff0 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d38:	4601      	mov	r1, r0
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	0a9b      	lsrs	r3, r3, #10
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d46:	5cd3      	ldrb	r3, [r2, r3]
 8003d48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40023800 	.word	0x40023800
 8003d54:	080049c4 	.word	0x080049c4

08003d58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d035      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d80:	4b62      	ldr	r3, [pc, #392]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d86:	f7fd f93b 	bl	8001000 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d8e:	f7fd f937 	bl	8001000 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e0b0      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003da0:	4b5b      	ldr	r3, [pc, #364]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f0      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	019a      	lsls	r2, r3, #6
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	071b      	lsls	r3, r3, #28
 8003db8:	4955      	ldr	r1, [pc, #340]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dc0:	4b52      	ldr	r3, [pc, #328]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dc6:	f7fd f91b 	bl	8001000 <HAL_GetTick>
 8003dca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dce:	f7fd f917 	bl	8001000 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e090      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003de0:	4b4b      	ldr	r3, [pc, #300]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8083 	beq.w	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	4b44      	ldr	r3, [pc, #272]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	4a43      	ldr	r2, [pc, #268]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0a:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e16:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a3e      	ldr	r2, [pc, #248]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e22:	f7fd f8ed 	bl	8001000 <HAL_GetTick>
 8003e26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e28:	e008      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7fd f8e9 	bl	8001000 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e062      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e3c:	4b35      	ldr	r3, [pc, #212]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e48:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d02f      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d028      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e66:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e70:	4b29      	ldr	r3, [pc, #164]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e76:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e7c:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e82:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d114      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7fd f8b7 	bl	8001000 <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fd f8b3 	bl	8001000 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e02a      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eac:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ee      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec4:	d10d      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eda:	490d      	ldr	r1, [pc, #52]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]
 8003ee0:	e005      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ef0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efa:	4905      	ldr	r1, [pc, #20]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	42470068 	.word	0x42470068
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40007000 	.word	0x40007000
 8003f18:	42470e40 	.word	0x42470e40

08003f1c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2203      	movs	r2, #3
 8003f28:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8003f2a:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8003f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8003f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f40:	0f1b      	lsrs	r3, r3, #28
 8003f42:	f003 0207 	and.w	r2, r3, #7
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003f52:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40023800 	.word	0x40023800

08003f74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d13d      	bne.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003f92:	4b22      	ldr	r3, [pc, #136]	; (800401c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f9a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d004      	beq.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d12f      	bne.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fa8:	617b      	str	r3, [r7, #20]
          break;
 8003faa:	e02f      	b.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fac:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb8:	d108      	bne.n	8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fba:	4b18      	ldr	r3, [pc, #96]	; (800401c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc2:	4a18      	ldr	r2, [pc, #96]	; (8004024 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	e007      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fcc:	4b13      	ldr	r3, [pc, #76]	; (800401c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe2:	099b      	lsrs	r3, r3, #6
 8003fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff6:	0f1b      	lsrs	r3, r3, #28
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	617b      	str	r3, [r7, #20]
          break;
 8004004:	e002      	b.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
          break;
 800400a:	bf00      	nop
        }
      }
      break;
 800400c:	bf00      	nop
    }
  }
  return frequency;
 800400e:	697b      	ldr	r3, [r7, #20]
}
 8004010:	4618      	mov	r0, r3
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40023800 	.word	0x40023800
 8004020:	00bb8000 	.word	0x00bb8000
 8004024:	007a1200 	.word	0x007a1200
 8004028:	00f42400 	.word	0x00f42400

0800402c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e056      	b.n	80040ec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7fc fdfd 	bl	8000c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004074:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	ea42 0103 	orr.w	r1, r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	0c1b      	lsrs	r3, r3, #16
 80040bc:	f003 0104 	and.w	r1, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69da      	ldr	r2, [r3, #28]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f043 0201 	orr.w	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3301      	adds	r3, #1
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a09      	ldr	r2, [pc, #36]	; (8004180 <USB_FlushTxFifo+0x48>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d901      	bls.n	8004164 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e006      	b.n	8004172 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b20      	cmp	r3, #32
 800416e:	d0f0      	beq.n	8004152 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	00030d40 	.word	0x00030d40

08004184 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2210      	movs	r2, #16
 8004194:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3301      	adds	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <USB_FlushRxFifo+0x40>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d901      	bls.n	80041a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e006      	b.n	80041b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d0f0      	beq.n	8004196 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	00030d40 	.word	0x00030d40

080041c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	; 0x24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	3303      	adds	r3, #3
 80041e2:	089b      	lsrs	r3, r3, #2
 80041e4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e00b      	b.n	8004204 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	3304      	adds	r3, #4
 80041fc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	3301      	adds	r3, #1
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	429a      	cmp	r2, r3
 800420a:	d3ef      	bcc.n	80041ec <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800420c:	69fb      	ldr	r3, [r7, #28]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3724      	adds	r7, #36	; 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4013      	ands	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004232:	68fb      	ldr	r3, [r7, #12]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f003 0301 	and.w	r3, r3, #1
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	68f9      	ldr	r1, [r7, #12]
 8004290:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d107      	bne.n	80042ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042a4:	461a      	mov	r2, r3
 80042a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80042aa:	6053      	str	r3, [r2, #4]
 80042ac:	e009      	b.n	80042c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d106      	bne.n	80042c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ba:	461a      	mov	r2, r3
 80042bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80042c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <USB_DriveVbus+0x44>
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d106      	bne.n	8004314 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800430e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004312:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431e:	d109      	bne.n	8004334 <USB_DriveVbus+0x64>
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800432e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004332:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	b29b      	uxth	r3, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4413      	add	r3, r2
 8004384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	0c9b      	lsrs	r3, r3, #18
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <USB_HC_Halt+0x3a>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d16c      	bne.n	8004478 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043bc:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d143      	bne.n	8004452 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043e8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	0151      	lsls	r1, r2, #5
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	440a      	add	r2, r1
 8004400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004408:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4413      	add	r3, r2
 8004412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	440a      	add	r2, r1
 8004420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004424:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004428:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	3301      	adds	r3, #1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004436:	d81d      	bhi.n	8004474 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4413      	add	r3, r2
 8004440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800444a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800444e:	d0ec      	beq.n	800442a <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004450:	e080      	b.n	8004554 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4413      	add	r3, r2
 800445a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	440a      	add	r2, r1
 8004468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800446c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004470:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004472:	e06f      	b.n	8004554 <USB_HC_Halt+0x1f0>
          break;
 8004474:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004476:	e06d      	b.n	8004554 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	440a      	add	r2, r1
 800448e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004496:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d143      	bne.n	8004530 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	0151      	lsls	r1, r2, #5
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	440a      	add	r2, r1
 80044be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	0151      	lsls	r1, r2, #5
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	440a      	add	r2, r1
 80044de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	0151      	lsls	r1, r2, #5
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	440a      	add	r2, r1
 80044fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004506:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3301      	adds	r3, #1
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004514:	d81d      	bhi.n	8004552 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4413      	add	r3, r2
 800451e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800452c:	d0ec      	beq.n	8004508 <USB_HC_Halt+0x1a4>
 800452e:	e011      	b.n	8004554 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	0151      	lsls	r1, r2, #5
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	440a      	add	r2, r1
 8004546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800454a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e000      	b.n	8004554 <USB_HC_Halt+0x1f0>
          break;
 8004552:	bf00      	nop
    }
  }

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff fdcf 	bl	8004116 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004578:	2110      	movs	r1, #16
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff fddc 	bl	8004138 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fdff 	bl	8004184 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	e01f      	b.n	80045cc <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045a2:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045aa:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045b2:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c0:	461a      	mov	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	3301      	adds	r3, #1
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b0f      	cmp	r3, #15
 80045d0:	d9dc      	bls.n	800458c <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	e034      	b.n	8004642 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045ee:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045f6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045fe:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460c:	461a      	mov	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	3301      	adds	r3, #1
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800461e:	d80c      	bhi.n	800463a <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004636:	d0ec      	beq.n	8004612 <USB_StopHost+0xb0>
 8004638:	e000      	b.n	800463c <USB_StopHost+0xda>
        break;
 800463a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	3301      	adds	r3, #1
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b0f      	cmp	r3, #15
 8004646:	d9c7      	bls.n	80045d8 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800464e:	461a      	mov	r2, r3
 8004650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004654:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800465c:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff fd48 	bl	80040f4 <USB_EnableGlobalInt>

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f804 	bl	8004692 <USBH_HandleSof>
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b0b      	cmp	r3, #11
 80046a2:	d10a      	bne.n	80046ba <USBH_HandleSof+0x28>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
  }
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80046d2:	bf00      	nop
}
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80046ee:	bf00      	nop
}
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10f      	bne.n	800472c <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00e      	beq.n	800473c <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004724:	2104      	movs	r1, #4
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	4798      	blx	r3
 800472a:	e007      	b.n	800473c <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004732:	2b01      	cmp	r3, #1
 8004734:	d102      	bne.n	800473c <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f8b1 	bl	80048b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	791b      	ldrb	r3, [r3, #4]
 8004758:	4619      	mov	r1, r3
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f820 	bl	80047a0 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	795b      	ldrb	r3, [r3, #5]
 8004764:	4619      	mov	r1, r3
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f81a 	bl	80047a0 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004784:	2105      	movs	r1, #5
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f878 	bl	8004880 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2203      	movs	r2, #3
 8004794:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	2b0a      	cmp	r3, #10
 80047b0:	d80b      	bhi.n	80047ca <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	32e0      	adds	r2, #224	; 0xe0
 80047b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	32e0      	adds	r2, #224	; 0xe0
 80047c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff ff41 	bl	800466e <USBH_LL_IncTimer>
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff ff79 	bl	80046fa <USBH_LL_Connect>
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff91 	bl	8004746 <USBH_LL_Disconnect>
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
 8004838:	4613      	mov	r3, r2
 800483a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff ff33 	bl	80046c2 <USBH_LL_PortEnabled>
} 
 800485c:	bf00      	nop
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff ff33 	bl	80046de <USBH_LL_PortDisabled>
} 
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004896:	4618      	mov	r0, r3
 8004898:	f7fc ffa4 	bl	80017e4 <HAL_HCD_Start>
 800489c:	4603      	mov	r3, r0
 800489e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f822 	bl	80048ec <USBH_Get_USB_Status>
 80048a8:	4603      	mov	r3, r0
 80048aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80048ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fc ffac 	bl	800182a <HAL_HCD_Stop>
 80048d2:	4603      	mov	r3, r0
 80048d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f807 	bl	80048ec <USBH_Get_USB_Status>
 80048de:	4603      	mov	r3, r0
 80048e0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80048e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d817      	bhi.n	8004930 <USBH_Get_USB_Status+0x44>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <USBH_Get_USB_Status+0x1c>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	08004919 	.word	0x08004919
 800490c:	0800491f 	.word	0x0800491f
 8004910:	08004925 	.word	0x08004925
 8004914:	0800492b 	.word	0x0800492b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	73fb      	strb	r3, [r7, #15]
    break;
 800491c:	e00b      	b.n	8004936 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800491e:	2302      	movs	r3, #2
 8004920:	73fb      	strb	r3, [r7, #15]
    break;
 8004922:	e008      	b.n	8004936 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004924:	2301      	movs	r3, #1
 8004926:	73fb      	strb	r3, [r7, #15]
    break;
 8004928:	e005      	b.n	8004936 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800492a:	2302      	movs	r3, #2
 800492c:	73fb      	strb	r3, [r7, #15]
    break;
 800492e:	e002      	b.n	8004936 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004930:	2302      	movs	r3, #2
 8004932:	73fb      	strb	r3, [r7, #15]
    break;
 8004934:	bf00      	nop
  }
  return usb_status;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <__libc_init_array>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	4e0d      	ldr	r6, [pc, #52]	; (800497c <__libc_init_array+0x38>)
 8004948:	4c0d      	ldr	r4, [pc, #52]	; (8004980 <__libc_init_array+0x3c>)
 800494a:	1ba4      	subs	r4, r4, r6
 800494c:	10a4      	asrs	r4, r4, #2
 800494e:	2500      	movs	r5, #0
 8004950:	42a5      	cmp	r5, r4
 8004952:	d109      	bne.n	8004968 <__libc_init_array+0x24>
 8004954:	4e0b      	ldr	r6, [pc, #44]	; (8004984 <__libc_init_array+0x40>)
 8004956:	4c0c      	ldr	r4, [pc, #48]	; (8004988 <__libc_init_array+0x44>)
 8004958:	f000 f820 	bl	800499c <_init>
 800495c:	1ba4      	subs	r4, r4, r6
 800495e:	10a4      	asrs	r4, r4, #2
 8004960:	2500      	movs	r5, #0
 8004962:	42a5      	cmp	r5, r4
 8004964:	d105      	bne.n	8004972 <__libc_init_array+0x2e>
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800496c:	4798      	blx	r3
 800496e:	3501      	adds	r5, #1
 8004970:	e7ee      	b.n	8004950 <__libc_init_array+0xc>
 8004972:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004976:	4798      	blx	r3
 8004978:	3501      	adds	r5, #1
 800497a:	e7f2      	b.n	8004962 <__libc_init_array+0x1e>
 800497c:	080049dc 	.word	0x080049dc
 8004980:	080049dc 	.word	0x080049dc
 8004984:	080049dc 	.word	0x080049dc
 8004988:	080049e0 	.word	0x080049e0

0800498c <memset>:
 800498c:	4402      	add	r2, r0
 800498e:	4603      	mov	r3, r0
 8004990:	4293      	cmp	r3, r2
 8004992:	d100      	bne.n	8004996 <memset+0xa>
 8004994:	4770      	bx	lr
 8004996:	f803 1b01 	strb.w	r1, [r3], #1
 800499a:	e7f9      	b.n	8004990 <memset+0x4>

0800499c <_init>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	bf00      	nop
 80049a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a2:	bc08      	pop	{r3}
 80049a4:	469e      	mov	lr, r3
 80049a6:	4770      	bx	lr

080049a8 <_fini>:
 80049a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049aa:	bf00      	nop
 80049ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ae:	bc08      	pop	{r3}
 80049b0:	469e      	mov	lr, r3
 80049b2:	4770      	bx	lr
